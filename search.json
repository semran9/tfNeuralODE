[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tfNeuralODE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shayaan Emran. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Emran S (2023). tfNeuralODE: Create Neural Ordinary Differential Equations 'tensorflow'. R package version 0.1.0, https://github.com/semran9/tfNeuralODE.","code":"@Manual{,   title = {tfNeuralODE: Create Neural Ordinary Differential Equations with 'tensorflow'},   author = {Shayaan Emran},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/semran9/tfNeuralODE}, }"},{"path":"/index.html","id":"tfneuralode","dir":"","previous_headings":"","what":"Create Neural Ordinary Differential Equations with tensorflow","title":"Create Neural Ordinary Differential Equations with tensorflow","text":"goal tfNeuralODE provide easy framework surrounding use Neural Ordinary Differential Equations R. package building top R Tensorflow, help wth auto-differentiation construction neural network models Keras. Examples package use can found project website.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Neural Ordinary Differential Equations with tensorflow","text":"can install development version tfNeuralODE like :","code":"devtools::install_github(\"https://github.com/semran9/tfNeuralODE.git\")"},{"path":"/reference/backward.html","id":null,"dir":"Reference","previous_headings":"","what":"Backward pass of the Neural ODE — backward","title":"Backward pass of the Neural ODE — backward","text":"Backward pass Neural ODE","code":""},{"path":"/reference/backward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Backward pass of the Neural ODE — backward","text":"","code":"backward(model, tsteps, outputs, output_gradients = NULL)"},{"path":"/reference/backward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Backward pass of the Neural ODE — backward","text":"model keras neural network defines Neural ODE. tsteps vector time step upon Neural ODE solved get final solution. outputs tensor outputs forward pass Neural ODE. output_gradients tensor gradients loss function.","code":""},{"path":"/reference/backward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Backward pass of the Neural ODE — backward","text":"model input last time step. gradient loss respect inputs use Adjoint Method. gradients loss neural ODE.","code":""},{"path":"/reference/backward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Backward pass of the Neural ODE — backward","text":"","code":"if (FALSE) { # reticulate::py_available() reticulate::py_module_available(\"tensorflow\")  # example code # single training example OdeModel(keras$Model) %py_class% {  initialize <- function() {    super$initialize()    self$block_1 <- layer_dense(units = 50, activation = 'tanh')    self$block_2 <- layer_dense(units = 2, activation = 'linear')  }   call <- function(inputs) {    x<- inputs ^ 3    x <- self$block_1(x)    self$block_2(x)  } } tsteps <- seq(0, 2.5, by = 2.5/10) true_y0 = t(c(2., 0.)) model<- OdeModel() optimizer = tf$keras$optimizers$legacy$Adam(learning_rate = 1e-3) # single training iteration pred = forward(model, true_y0, tsteps) with(tf$GradientTape() %as% tape, {   tape$watch(pred)   loss = tf$reduce_mean(tf$abs(pred - inp[[2]])) }) dLoss = tape$gradient(loss, pred) list_w = backward(model, tsteps[1:batch_time], pred, output_gradients = dLoss) optimizer$apply_gradients(zip_lists(list_w[[3]], model$trainable_variables)) }"},{"path":"/reference/backward_dynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to solve the backwards dynamics of the Neural ODE — backward_dynamics","title":"Internal function to solve the backwards dynamics of the Neural ODE — backward_dynamics","text":"Internal function solve backwards dynamics Neural ODE","code":""},{"path":"/reference/backward_dynamics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to solve the backwards dynamics of the Neural ODE — backward_dynamics","text":"","code":"backward_dynamics(state, model)"},{"path":"/reference/backward_dynamics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to solve the backwards dynamics of the Neural ODE — backward_dynamics","text":"state current state differential equation model neural network defines Neural ODE.","code":""},{"path":"/reference/backward_dynamics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to solve the backwards dynamics of the Neural ODE — backward_dynamics","text":"Returns list number 1, new backwards state differential equation gradients calculated network.","code":""},{"path":"/reference/euler_step.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to employ the Euler Method to solve an ODE. — euler_step","title":"A function to employ the Euler Method to solve an ODE. — euler_step","text":"function employ Euler Method solve ODE.","code":""},{"path":"/reference/euler_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to employ the Euler Method to solve an ODE. — euler_step","text":"","code":"euler_step(func, dt, state)"},{"path":"/reference/euler_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to employ the Euler Method to solve an ODE. — euler_step","text":"func derivative function. dt time step Euler solver. state list defines current state ODE, one entry number, tensor describes function state.","code":""},{"path":"/reference/euler_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to employ the Euler Method to solve an ODE. — euler_step","text":"list describes updated state ODE.","code":""},{"path":"/reference/euler_update.html","id":null,"dir":"Reference","previous_headings":"","what":"A Euler method state updater. — euler_update","title":"A Euler method state updater. — euler_update","text":"Euler method state updater.","code":""},{"path":"/reference/euler_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Euler method state updater. — euler_update","text":"","code":"euler_update(h_list, dh_list, dt)"},{"path":"/reference/euler_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Euler method state updater. — euler_update","text":"h_list initial state ODE. dh_list description dt time step update initial state .","code":""},{"path":"/reference/euler_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Euler method state updater. — euler_update","text":"updated state ODE.","code":""},{"path":"/reference/forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward pass of the Neural ODE network — forward","title":"Forward pass of the Neural ODE network — forward","text":"Forward pass Neural ODE network","code":""},{"path":"/reference/forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward pass of the Neural ODE network — forward","text":"","code":"forward(model, inputs, tsteps, return_states = FALSE)"},{"path":"/reference/forward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward pass of the Neural ODE network — forward","text":"model keras neural network defines Neural ODE. inputs Matrix vector inputs neural network. tsteps vector time step upon Neural ODE solved get final solution. return_states boolean dictates whether intermediary states input final solution returned.","code":""},{"path":"/reference/forward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward pass of the Neural ODE network — forward","text":"solution forward pass Neural ODE","code":""},{"path":"/reference/forward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward pass of the Neural ODE network — forward","text":"","code":"if (FALSE) { # reticulate::py_available() reticulate::py_module_available(\"tensorflow\")  # example code  library(tensorflow) library(keras)  OdeModel(keras$Model) %py_class% {  initialize <- function() {    super$initialize()    self$block_1 <- layer_dense(units = 50, activation = 'tanh')    self$block_2 <- layer_dense(units = 2, activation = 'linear')  }   call <- function(inputs) {    x<- inputs ^ 3    x <- self$block_1(x)    self$block_2(x)  } } tsteps <- seq(0, 2.5, by = 2.5/10) true_y0 = t(c(2., 0.)) model<- OdeModel() forward(model, true_y0, tsteps)  }"},{"path":"/reference/rk4_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Runge Kutta solver for ordinary differential equations — rk4_step","title":"Runge Kutta solver for ordinary differential equations — rk4_step","text":"Runge Kutta solver ordinary differential equations","code":""},{"path":"/reference/rk4_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runge Kutta solver for ordinary differential equations — rk4_step","text":"","code":"rk4_step(func, dt, state)"},{"path":"/reference/rk4_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runge Kutta solver for ordinary differential equations — rk4_step","text":"func function numerically integrated. dt Time step. state list describing state function, first element 1, second tensor represents state","code":""},{"path":"/reference/rk4_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runge Kutta solver for ordinary differential equations — rk4_step","text":"list containing new time numerical integration function across time step new time.","code":""},{"path":"/reference/rk4_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runge Kutta solver for ordinary differential equations — rk4_step","text":"","code":"if (FALSE) { # reticulate::py_available() reticulate::py_module_available(\"tensorflow\") # example code library(tensorflow) ode_fun<- function(u){   r = u ^ 3   true_A = rbind(c(-0.1, 2.0), c(-2.0, -0.1))   du <- r %*% (true_A)   return(as.matrix(du)) } y<- tensorflow::tf$cast(t(as.matrix(c(2, 0))), dtype = tf$float32) x<- rk4_step(ode_fun,  dt = 0.25,             state = list(1.0, y)) x }"},{"path":"/reference/rk4_step_backwards.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom internal RK4 solver for solving the backward pass of the Neural ODE. — rk4_step_backwards","title":"Custom internal RK4 solver for solving the backward pass of the Neural ODE. — rk4_step_backwards","text":"Custom internal RK4 solver solving backward pass Neural ODE.","code":""},{"path":"/reference/rk4_step_backwards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom internal RK4 solver for solving the backward pass of the Neural ODE. — rk4_step_backwards","text":"","code":"rk4_step_backwards(backward_dynamics, dt, state, model)"},{"path":"/reference/rk4_step_backwards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom internal RK4 solver for solving the backward pass of the Neural ODE. — rk4_step_backwards","text":"backward_dynamics backward dynamics function Neural ODE. dt time step solve ODE . state current state differential equation. model neural network defines Neural ODE.","code":""},{"path":"/reference/rk4_step_backwards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom internal RK4 solver for solving the backward pass of the Neural ODE. — rk4_step_backwards","text":"output list updated backwards state.","code":""},{"path":"/news/index.html","id":"tfneuralode-010","dir":"Changelog","previous_headings":"","what":"tfNeuralODE 0.1.0","title":"tfNeuralODE 0.1.0","text":"Initial CRAN submission.","code":""}]
